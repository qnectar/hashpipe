// Generated by CoffeeScript 1.8.0
(function() {
  var Pipeline, inspect, parsePipelines, pipe, runTest, showParsed, tape, test_ctx, test_data, test_name, tests, util, _inspect, _ref;

  _ref = require('../pipeline'), Pipeline = _ref.Pipeline, parsePipelines = _ref.parsePipelines;

  tape = require('tape');

  util = require('util');

  _inspect = function(o) {
    return util.inspect(o, {
      depth: null
    });
  };

  inspect = function(o) {
    return console.log(_inspect(o));
  };

  pipe = new Pipeline().use('keywords');

  test_ctx = pipe.subScope({
    vars: {
      hi: 'hello',
      cheese: 'fromage',
      george: {
        name: 'Gregory'
      }
    }
  });

  tests = {};

  tests.single_obj = {
    cmd: "{name: \"joe\"}",
    expected: {
      name: 'joe'
    }
  };

  tests.nested_obj = {
    cmd: "{name: {lang: 'en', value: \"Joe\"}}",
    expected: {
      name: {
        lang: 'en',
        value: 'Joe'
      }
    }
  };

  tests.obj_at = {
    cmd: "{name: \"fred\"} @ name",
    expected: 'fred'
  };

  showParsed = function(cmd) {
    console.log('\n~~~~~');
    console.log(cmd + ' ->\n');
    inspect(parsePipelines(cmd));
    return console.log('~~~~~\n');
  };

  runTest = function(test_name) {
    return tape(test_name, function(t) {
      showParsed(tests[test_name].cmd);
      return pipe.exec(tests[test_name].cmd, {}, test_ctx, function(err, test_result) {
        t.deepLooseEqual(test_result, tests[test_name].expected, 'Meets expectations.');
        t.end();
        console.log('\n');
        return inspect(test_result);
      });
    });
  };

  for (test_name in tests) {
    test_data = tests[test_name];
    runTest(test_name);
  }

}).call(this);
