// Generated by CoffeeScript 1.8.0
(function() {
  var fixUrl, httpMethod, parseResponseAll, parseResponseData, parseResponseHeaders, request, url, _, _parseResponseData, _parseResponseHeaders;

  request = require('request').defaults({
    encoding: null
  });

  url = require('url');

  _ = require('underscore');

  _parseResponseData = function(res, data) {
    var e;
    if (data instanceof Buffer || typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (_error) {
        e = _error;
        if (data instanceof Buffer) {
          data = data.toString();
        }
      }
    }
    return data;
  };

  parseResponseData = function(cb) {
    return function(err, res, data) {
      return cb(err, _parseResponseData(res, data));
    };
  };

  _parseResponseHeaders = function(res, data) {
    return res.headers;
  };

  parseResponseHeaders = function(cb) {
    return function(err, res, data) {
      return cb(err, _parseResponseHeaders(res, data));
    };
  };

  parseResponseAll = function(cb) {
    return function(err, res, data) {
      return cb(err, {
        data: _parseResponseData(res, data),
        headers: _parseResponseHeaders(res, data)
      });
    };
  };

  fixUrl = function(u) {
    if (url.parse(u).protocol == null) {
      return 'http://' + u;
    } else {
      return u;
    }
  };

  httpMethod = function(method, responseParser) {
    if (responseParser == null) {
      responseParser = parseResponseData;
    }
    return function(inp, args, ctx, cb) {
      var auth, headers, req, request_options, _ref;
      _ref = args[2] || {}, headers = _ref.headers, auth = _ref.auth;
      request_options = {
        url: fixUrl(args[0]),
        method: method,
        json: (inp == null) || (typeof inp === 'object'),
        body: method !== 'GET' ? inp : void 0,
        qs: method === 'GET' ? args[1] : void 0,
        headers: _.extend({
          'user-agent': 'Hashpipe HTTP Module'
        }, headers)
      };
      req = request(request_options, responseParser(cb));
      if (auth) {
        return req.auth(auth.username, auth.password);
      }
    };
  };

  exports.get = httpMethod('GET');

  exports['get-headers'] = httpMethod('GET', parseResponseHeaders);

  exports['get-all'] = httpMethod('GET', parseResponseAll);

  exports.post = httpMethod('POST');

  exports.put = httpMethod('PUT');

  exports["delete"] = httpMethod('DELETE');

  exports.tostring = function(inp, args, ctx, cb) {
    return cb(null, inp.toString());
  };

}).call(this);
