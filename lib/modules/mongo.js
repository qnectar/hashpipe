// Generated by CoffeeScript 1.8.0
(function() {
  var fixQueryIds, locals, mongodb,
    __slice = [].slice;

  mongodb = require('mongodb');

  locals = {};

  fixQueryIds = function(query) {
    var fixed_query, k, v;
    fixed_query = {};
    for (k in query) {
      v = query[k];
      if (k === '_id') {
        v = mongodb.ObjectID(v);
      }
      fixed_query[k] = v;
    }
    return fixed_query;
  };

  exports.connect = function(config) {
    var fns;
    locals.db = null;
    new mongodb.Db((config != null ? config.db : void 0) || 'hashpipe', mongodb.Server((config != null ? config.host : void 0) || 'localhost', 27017), {
      safe: true
    }).open(function(err, db) {
      return locals.db = db;
    });
    fns = {
      mongo: function(inp, args, ctx, cb) {
        var collection, command, options, query, _ref;
        command = args[0];
        collection = args[1];
        query = args[2] || {};
        options = args[3] || {};
        query = fixQueryIds(query);
        if (command === 'use') {
          return new mongodb.Db(args[1], mongodb.Server((config != null ? config.host : void 0) || 'localhost', 27017), {
            safe: true
          }).open(function(err, db) {
            locals.db = db;
            return cb(null, {
              success: true
            });
          });
        } else if (command === 'eval') {
          return (_ref = locals.db)[command].apply(_ref, __slice.call(args.slice(1)).concat([cb]));
        } else if (command === 'collections') {
          return locals.db.collectionNames(cb);
        } else if (command === 'dbs') {
          return locals.db["eval"]("db.getMongo().getDBNames()", cb);
        } else if (command === 'find') {
          return locals.db.collection(collection)[command](query, options).toArray(cb);
        } else {
          return locals.db.collection(collection)[command](query, options, cb);
        }
      }
    };
    return fns;
  };

  exports.db = function() {
    return locals.db;
  };

}).call(this);
